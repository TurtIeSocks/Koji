datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model account {
  username                       String  @id @db.VarChar(32)
  password                       String  @db.VarChar(32)
  first_warning_timestamp        Int?    @db.UnsignedInt
  failed_timestamp               Int?    @db.UnsignedInt
  failed                         String? @db.VarChar(32)
  level                          Int     @default(0) @db.UnsignedTinyInt
  last_encounter_lat             Float?
  last_encounter_lon             Float?
  last_encounter_time            Int?    @db.UnsignedInt
  spins                          Int     @default(0) @db.UnsignedSmallInt
  creation_timestamp             Int?    @db.UnsignedInt
  warn                           Int?    @db.UnsignedTinyInt
  warn_expire_timestamp          Int?    @db.UnsignedInt
  warn_message_acknowledged      Int?    @db.UnsignedTinyInt
  suspended_message_acknowledged Int?    @db.UnsignedTinyInt
  was_suspended                  Int?    @db.UnsignedTinyInt
  banned                         Int?    @db.UnsignedTinyInt
  last_used_timestamp            Int?    @db.UnsignedInt
  group                          String? @db.VarChar(50)
  device                         device?
}

model assignment {
  device_uuid                                        String?                       @db.VarChar(40)
  instance_name                                      String                        @db.VarChar(30)
  time                                               Int                           @db.UnsignedMediumInt
  enabled                                            Int                           @default(1) @db.UnsignedTinyInt
  id                                                 Int                           @id @default(autoincrement()) @db.UnsignedInt
  device_group_name                                  String?                       @db.VarChar(30)
  source_instance_name                               String?                       @db.VarChar(30)
  date                                               DateTime?                     @db.Date
  device_group                                       device_group?                 @relation(fields: [device_group_name], references: [name], onDelete: Cascade, map: "assignment_fk_source_device_group_name")
  device                                             device?                       @relation(fields: [device_uuid], references: [uuid], onDelete: Cascade, map: "assignment_fk_device_uuid")
  instance_assignment_instance_nameToinstance        instance                      @relation("assignment_instance_nameToinstance", fields: [instance_name], references: [name], onDelete: Cascade, map: "assignment_fk_instance_name")
  instance_assignment_source_instance_nameToinstance instance?                     @relation("assignment_source_instance_nameToinstance", fields: [source_instance_name], references: [name], onDelete: Cascade, map: "assignment_fk_source_instance_name")
  assignment_group_assignment                        assignment_group_assignment[]

  @@unique([device_uuid, device_group_name, instance_name, time, date], map: "assignment_unique")
  @@index([instance_name], map: "assignment_fk_instance_name")
  @@index([device_group_name], map: "assignment_fk_source_device_group_name")
  @@index([source_instance_name], map: "assignment_fk_source_instance_name")
}

model assignment_group {
  name                        String                        @id @unique(map: "name") @db.VarChar(30)
  assignment_group_assignment assignment_group_assignment[]
}

model assignment_group_assignment {
  assignment_group_name String           @db.VarChar(30)
  assignment_id         Int              @db.UnsignedInt
  assignment_group      assignment_group @relation(fields: [assignment_group_name], references: [name], onDelete: Cascade, map: "assignment_group_assignment_fk_assignment_group_name")
  assignment            assignment       @relation(fields: [assignment_id], references: [id], onDelete: Cascade, map: "assignment_group_assignment_fk_assignment_id")

  @@id([assignment_group_name, assignment_id])
  @@index([assignment_id], map: "assignment_group_assignment_fk_assignment_id")
}

model device {
  uuid                String                @id @db.VarChar(40)
  instance_name       String?               @db.VarChar(30)
  last_host           String?               @db.VarChar(30)
  last_seen           Int                   @default(0) @db.UnsignedInt
  account_username    String?               @unique(map: "uk_iaccount_username") @db.VarChar(32)
  last_lat            Float?                @default(0)
  last_lon            Float?                @default(0)
  account             account?              @relation(fields: [account_username], references: [username], map: "fk_account_username")
  instance            instance?             @relation(fields: [instance_name], references: [name], map: "fk_instance_name")
  assignment          assignment[]
  device_group_device device_group_device[]

  @@index([instance_name], map: "fk_instance_name")
}

model device_group {
  name                String                @id @unique(map: "name") @db.VarChar(30)
  assignment          assignment[]
  device_group_device device_group_device[]
}

model device_group_device {
  device_group_name String       @db.VarChar(30)
  device_uuid       String       @db.VarChar(40)
  device_group      device_group @relation(fields: [device_group_name], references: [name], onDelete: Cascade, map: "device_group_device_fk_device_group_name")
  device            device       @relation(fields: [device_uuid], references: [uuid], onDelete: Cascade, map: "device_group_device_fk_device_uuid")

  @@id([device_group_name, device_uuid])
  @@index([device_uuid], map: "device_group_device_fk_device_uuid")
}

model discord_rule {
  priority   Int     @id
  server_id  BigInt  @db.UnsignedBigInt
  role_id    BigInt? @db.UnsignedBigInt
  group_name String  @db.VarChar(32)
  group      group   @relation(fields: [group_name], references: [name], onDelete: Cascade, map: "discord_rule_ibfk_1")

  @@index([group_name], map: "group_name")
}

model group {
  name                          String         @id @db.VarChar(32)
  perm_view_map                 Int            @db.UnsignedTinyInt
  perm_view_map_raid            Int            @db.UnsignedTinyInt
  perm_view_map_pokemon         Int            @db.UnsignedTinyInt
  perm_view_stats               Int            @db.UnsignedTinyInt
  perm_admin                    Int            @db.UnsignedTinyInt
  perm_view_map_gym             Int            @db.UnsignedTinyInt
  perm_view_map_pokestop        Int            @db.UnsignedTinyInt
  perm_view_map_spawnpoint      Int            @db.UnsignedTinyInt
  perm_view_map_quest           Int            @db.UnsignedTinyInt
  perm_view_map_iv              Int            @db.UnsignedTinyInt
  perm_view_map_cell            Int            @db.UnsignedTinyInt
  perm_view_map_lure            Int            @db.UnsignedTinyInt
  perm_view_map_invasion        Int            @db.UnsignedTinyInt
  perm_view_map_device          Int            @db.UnsignedTinyInt
  perm_view_map_weather         Int            @db.UnsignedTinyInt
  perm_view_map_submission_cell Int            @db.UnsignedTinyInt
  perm_view_map_event_pokemon   Int            @db.UnsignedTinyInt
  discord_rule                  discord_rule[]
  user                          user[]
}

model gym {
  id                      String  @id @db.VarChar(35)
  lat                     Float
  lon                     Float
  name                    String? @db.VarChar(128)
  url                     String? @db.VarChar(200)
  last_modified_timestamp Int?    @db.UnsignedInt
  raid_end_timestamp      Int?    @db.UnsignedInt
  raid_spawn_timestamp    Int?    @db.UnsignedInt
  raid_battle_timestamp   Int?    @db.UnsignedInt
  updated                 Int     @db.UnsignedInt
  raid_pokemon_id         Int?    @db.UnsignedSmallInt
  guarding_pokemon_id     Int?    @db.UnsignedSmallInt
  available_slots         Int?    @db.UnsignedSmallInt
  availble_slots          Int?    @db.UnsignedSmallInt
  team_id                 Int?    @db.UnsignedTinyInt
  raid_level              Int?    @db.UnsignedTinyInt
  enabled                 Int?    @db.UnsignedTinyInt
  ex_raid_eligible        Int?    @db.UnsignedTinyInt
  in_battle               Int?    @db.UnsignedTinyInt
  raid_pokemon_move_1     Int?    @db.UnsignedSmallInt
  raid_pokemon_move_2     Int?    @db.UnsignedSmallInt
  raid_pokemon_form       Int?    @db.UnsignedSmallInt
  raid_pokemon_cp         Int?    @db.UnsignedInt
  raid_is_exclusive       Int?    @db.UnsignedTinyInt
  cell_id                 BigInt? @db.UnsignedBigInt
  deleted                 Int     @default(0) @db.UnsignedTinyInt
  total_cp                Int?    @db.UnsignedInt
  first_seen_timestamp    Int     @db.UnsignedInt
  raid_pokemon_gender     Int?    @db.UnsignedTinyInt
  sponsor_id              Int?    @db.UnsignedSmallInt
  partner_id              String? @db.VarChar(35)
  raid_pokemon_costume    Int?    @db.UnsignedSmallInt
  raid_pokemon_evolution  Int?    @db.UnsignedTinyInt
  ar_scan_eligible        Int?    @db.UnsignedTinyInt
  power_up_level          Int?    @db.UnsignedSmallInt
  power_up_points         Int?    @db.UnsignedInt
  power_up_end_timestamp  Int?    @db.UnsignedInt
  s2cell                  s2cell? @relation(fields: [cell_id], references: [id], onDelete: Cascade, map: "fk_gym_cell_id")

  @@index([cell_id], map: "fk_gym_cell_id")
  @@index([lat, lon], map: "ix_coords")
  @@index([deleted], map: "ix_gym_deleted")
  @@index([raid_end_timestamp], map: "ix_raid_end_timestamp")
  @@index([raid_pokemon_id], map: "ix_raid_pokemon_id")
  @@index([updated], map: "ix_updated")
}

model incident {
  id           String   @id @db.VarChar(35)
  pokestop_id  String   @db.VarChar(35)
  start        Int      @db.UnsignedInt
  expiration   Int      @db.UnsignedInt
  display_type Int      @db.UnsignedSmallInt
  style        Int      @db.UnsignedSmallInt
  character    Int      @db.UnsignedSmallInt
  updated      Int      @db.UnsignedInt
  pokestop     pokestop @relation(fields: [pokestop_id], references: [id], onDelete: Cascade, map: "fk_incident_pokestop_id")

  @@index([pokestop_id, expiration], map: "ix_pokestop")
}

model instance {
  name                                                 String        @id @db.VarChar(30)
  type                                                 instance_type
  data                                                 String        @db.LongText
  assignment_assignment_instance_nameToinstance        assignment[]  @relation("assignment_instance_nameToinstance")
  assignment_assignment_source_instance_nameToinstance assignment[]  @relation("assignment_source_instance_nameToinstance")
  device                                               device[]
}

model invasion_stats {
  date       DateTime @db.Date
  grunt_type Int      @default(0) @db.UnsignedSmallInt
  count      Int

  @@id([date, grunt_type])
}

model metadata {
  key   String  @id @db.VarChar(200)
  value String? @db.LongText
}

model pokemon {
  id                        String      @db.VarChar(25)
  pokestop_id               String?     @db.VarChar(35)
  spawn_id                  BigInt?     @db.UnsignedBigInt
  lat                       Float
  lon                       Float
  weight                    Float?
  size                      Float?
  expire_timestamp          Int?        @db.UnsignedInt
  updated                   Int?        @db.UnsignedInt
  pokemon_id                Int         @db.UnsignedSmallInt
  move_1                    Int?        @db.UnsignedSmallInt
  move_2                    Int?        @db.UnsignedSmallInt
  gender                    Int?        @db.UnsignedTinyInt
  cp                        Int?        @db.UnsignedSmallInt
  atk_iv                    Int?        @db.UnsignedTinyInt
  def_iv                    Int?        @db.UnsignedTinyInt
  sta_iv                    Int?        @db.UnsignedTinyInt
  form                      Int?        @db.UnsignedSmallInt
  level                     Int?        @db.UnsignedTinyInt
  weather                   Int?        @db.UnsignedTinyInt
  costume                   Int?        @db.UnsignedTinyInt
  first_seen_timestamp      Int         @db.UnsignedInt
  changed                   Int         @default(0) @db.UnsignedInt
  iv                        Float?      @db.Float
  cell_id                   BigInt?     @db.UnsignedBigInt
  expire_timestamp_verified Int         @db.UnsignedTinyInt
  display_pokemon_id        Int?        @db.UnsignedSmallInt
  shiny                     Boolean?    @default(false)
  username                  String?     @db.VarChar(32)
  capture_1                 Float?
  capture_2                 Float?
  capture_3                 Float?
  pvp                       String?     @db.Text
  is_event                  Int         @default(0) @db.UnsignedTinyInt
  s2cell                    s2cell?     @relation(fields: [cell_id], references: [id], onDelete: Cascade, map: "fk_pokemon_cell_id")
  pokestop                  pokestop?   @relation(fields: [pokestop_id], references: [id], map: "fk_pokestop_id")
  spawnpoint                spawnpoint? @relation(fields: [spawn_id], references: [id], map: "fk_spawn_id")

  @@id([id, is_event])
  @@index([cell_id], map: "fk_pokemon_cell_id")
  @@index([pokestop_id], map: "fk_pokestop_id")
  @@index([spawn_id], map: "fk_spawn_id")
  @@index([atk_iv], map: "ix_atk_iv")
  @@index([changed], map: "ix_changed")
  @@index([lat, lon], map: "ix_coords")
  @@index([def_iv], map: "ix_def_iv")
  @@index([expire_timestamp], map: "ix_expire_timestamp")
  @@index([iv], map: "ix_iv")
  @@index([level], map: "ix_level")
  @@index([pokemon_id], map: "ix_pokemon_id")
  @@index([sta_iv], map: "ix_sta_iv")
  @@index([updated], map: "ix_updated")
}

model pokemon_hundo_stats {
  date       DateTime @db.Date
  pokemon_id Int      @db.UnsignedSmallInt
  count      Int

  @@id([date, pokemon_id])
}

model pokemon_iv_stats {
  date       DateTime @db.Date
  pokemon_id Int      @db.UnsignedSmallInt
  count      Int

  @@id([date, pokemon_id])
}

model pokemon_shiny_stats {
  date       DateTime @db.Date
  pokemon_id Int      @db.UnsignedSmallInt
  count      Int

  @@id([date, pokemon_id])
}

model pokemon_stats {
  date       DateTime @db.Date
  pokemon_id Int      @db.UnsignedSmallInt
  count      Int

  @@id([date, pokemon_id])
}

model pokestop {
  id                              String     @id @db.VarChar(35)
  lat                             Float
  lon                             Float
  name                            String?    @db.VarChar(128)
  url                             String?    @db.VarChar(200)
  lure_expire_timestamp           Int?       @db.UnsignedInt
  last_modified_timestamp         Int?       @db.UnsignedInt
  updated                         Int        @db.UnsignedInt
  enabled                         Int?       @db.UnsignedTinyInt
  quest_type                      Int?       @db.UnsignedInt
  quest_timestamp                 Int?       @db.UnsignedInt
  quest_target                    Int?       @db.UnsignedSmallInt
  quest_conditions                String?    @db.Text
  quest_rewards                   String?    @db.Text
  quest_template                  String?    @db.VarChar(100)
  quest_title                     String?    @db.VarChar(100)
  quest_reward_type               Int?       @db.UnsignedSmallInt
  quest_item_id                   Int?       @db.UnsignedSmallInt
  quest_reward_amount             Int?       @db.UnsignedSmallInt
  cell_id                         BigInt?    @db.UnsignedBigInt
  deleted                         Int        @default(0) @db.UnsignedTinyInt
  lure_id                         Int?       @default(0) @db.SmallInt
  first_seen_timestamp            Int        @db.UnsignedInt
  sponsor_id                      Int?       @db.UnsignedSmallInt
  partner_id                      String?    @db.VarChar(35)
  quest_pokemon_id                Int?       @db.UnsignedSmallInt
  ar_scan_eligible                Int?       @db.UnsignedTinyInt
  power_up_level                  Int?       @db.UnsignedSmallInt
  power_up_points                 Int?       @db.UnsignedInt
  power_up_end_timestamp          Int?       @db.UnsignedInt
  alternative_quest_type          Int?       @db.UnsignedInt
  alternative_quest_timestamp     Int?       @db.UnsignedInt
  alternative_quest_target        Int?       @db.UnsignedSmallInt
  alternative_quest_conditions    String?    @db.Text
  alternative_quest_rewards       String?    @db.Text
  alternative_quest_template      String?    @db.VarChar(100)
  alternative_quest_title         String?    @db.VarChar(100)
  alternative_quest_pokemon_id    Int?       @db.UnsignedSmallInt
  alternative_quest_reward_type   Int?       @db.UnsignedSmallInt
  alternative_quest_item_id       Int?       @db.UnsignedSmallInt
  alternative_quest_reward_amount Int?       @db.UnsignedSmallInt
  s2cell                          s2cell?    @relation(fields: [cell_id], references: [id], onDelete: Cascade, map: "fk_pokestop_cell_id")
  incident                        incident[]
  pokemon                         pokemon[]

  @@index([cell_id], map: "fk_pokestop_cell_id")
  @@index([alternative_quest_pokemon_id], map: "ix_alternative_quest_alternative_quest_pokemon_id")
  @@index([alternative_quest_item_id], map: "ix_alternative_quest_item_id")
  @@index([alternative_quest_reward_type], map: "ix_alternative_quest_reward_type")
  @@index([lat, lon], map: "ix_coords")
  @@index([lure_expire_timestamp], map: "ix_lure_expire_timestamp")
  @@index([deleted], map: "ix_pokestop_deleted")
  @@index([quest_item_id], map: "ix_quest_item_id")
  @@index([quest_pokemon_id], map: "ix_quest_pokemon_id")
  @@index([quest_reward_type], map: "ix_quest_reward_type")
  @@index([updated], map: "ix_updated")
}

model quest_stats {
  date        DateTime @db.Date
  reward_type Int      @default(0) @db.UnsignedSmallInt
  pokemon_id  Int      @default(0) @db.UnsignedSmallInt
  item_id     Int      @default(0) @db.UnsignedSmallInt
  count       Int

  @@id([date, reward_type, pokemon_id, item_id])
}

model raid_stats {
  date       DateTime @db.Date
  pokemon_id Int      @db.UnsignedSmallInt
  count      Int
  level      Int?     @db.UnsignedSmallInt

  @@id([date, pokemon_id])
}

model s2cell {
  id         BigInt     @id @db.UnsignedBigInt
  level      Int?       @db.UnsignedTinyInt
  center_lat Float      @default(0.00000000000000)
  center_lon Float      @default(0.00000000000000)
  updated    Int        @db.UnsignedInt
  gym        gym[]
  pokemon    pokemon[]
  pokestop   pokestop[]

  @@index([center_lat, center_lon], map: "ix_coords")
  @@index([updated], map: "ix_updated")
}

model spawnpoint {
  id          BigInt    @id @db.UnsignedBigInt
  lat         Float
  lon         Float
  updated     Int       @default(0) @db.UnsignedInt
  last_seen   Int       @default(0) @db.UnsignedInt
  despawn_sec Int?      @db.UnsignedSmallInt
  pokemon     pokemon[]

  @@index([lat, lon], map: "ix_coords")
  @@index([last_seen], map: "ix_last_seen")
  @@index([updated], map: "ix_updated")
}

model token {
  token            String     @id @db.VarChar(50)
  type             token_type
  username         String     @db.VarChar(32)
  expire_timestamp Int        @db.UnsignedInt
  user             user       @relation(fields: [username], references: [username], onDelete: Cascade, map: "token_ibfk_1")

  @@index([username], map: "fk_tokem_username")
  @@index([expire_timestamp], map: "ix_expire_timestamp")
}

model user {
  username       String  @id @db.VarChar(32)
  email          String  @unique(map: "email") @db.VarChar(128)
  password       String  @db.VarChar(72)
  discord_id     BigInt? @db.UnsignedBigInt
  email_verified Int?    @default(0) @db.UnsignedTinyInt
  group_name     String  @default("default") @db.VarChar(32)
  group          group   @relation(fields: [group_name], references: [name], onDelete: NoAction, map: "fk_group_name")
  token          token[]

  @@index([group_name], map: "fk_group_name")
  @@index([discord_id], map: "ix_user_discord_id")
}

model weather {
  id                   BigInt @id
  level                Int?   @db.UnsignedTinyInt
  latitude             Float  @default(0.00000000000000)
  longitude            Float  @default(0.00000000000000)
  gameplay_condition   Int?   @db.UnsignedTinyInt
  wind_direction       Int?   @db.MediumInt
  cloud_level          Int?   @db.UnsignedTinyInt
  rain_level           Int?   @db.UnsignedTinyInt
  wind_level           Int?   @db.UnsignedTinyInt
  snow_level           Int?   @db.UnsignedTinyInt
  fog_level            Int?   @db.UnsignedTinyInt
  special_effect_level Int?   @db.UnsignedTinyInt
  severity             Int?   @db.UnsignedTinyInt
  warn_weather         Int?   @db.UnsignedTinyInt
  updated              Int    @db.UnsignedInt
}

model web_session {
  token     String  @id @db.VarChar(255)
  userid    String? @db.VarChar(255)
  created   Int     @default(0)
  updated   Int     @default(0)
  idle      Int     @default(0)
  data      String? @db.Text
  ipaddress String? @db.VarChar(255)
  useragent String? @db.Text
}

model webhook {
  name    String  @unique(map: "name") @db.VarChar(30)
  url     String  @db.VarChar(256)
  delay   Float?  @default(5)
  types   String? @db.LongText
  data    String? @db.LongText
  enabled Int?    @default(1) @db.UnsignedTinyInt
}

enum instance_type {
  circle_pokemon
  circle_smart_pokemon
  circle_raid
  circle_smart_raid
  auto_quest
  pokemon_iv
  leveling
}

enum token_type {
  confirm_email
  reset_password
}
