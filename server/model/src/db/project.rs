//! SeaORM Entity. Generated by sea-orm-codegen 0.10.1

use crate::utils::{json_related_sort, parse_order};

use super::*;
use sea_orm::entity::prelude::*;
use serde_json::json;
use std::str::FromStr;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "project")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: u32,
    pub name: String,
    pub api_endpoint: Option<String>,
    pub api_key: Option<String>,
    pub scanner: bool,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::geofence::Entity")]
    Geofence,
}

impl Related<geofence::Entity> for Entity {
    fn to() -> RelationDef {
        geofence_project::Relation::Geofence.def()
    }
    fn via() -> Option<RelationDef> {
        Some(geofence_project::Relation::Project.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl Model {
    fn get_related_geofences(&self) -> Select<geofence::Entity> {
        self.find_related(geofence::Entity)
            .select_only()
            .column(geofence::Column::Id)
            .column(geofence::Column::Name)
    }
}

pub struct Query;

impl Query {
    pub async fn get_one(db: &DatabaseConnection, id: String) -> Result<Model, ModelError> {
        let record = match id.parse::<u32>() {
            Ok(id) => Entity::find_by_id(id).one(db).await?,
            Err(_) => Entity::find().filter(Column::Name.eq(id)).one(db).await?,
        };
        if let Some(record) = record {
            Ok(record)
        } else {
            Err(ModelError::Geofence("Does not exist".to_string()))
        }
    }

    pub async fn get_one_json(db: &DatabaseConnection, id: String) -> Result<Json, ModelError> {
        match Query::get_one(db, id).await {
            Ok(record) => Ok(json!(record)),
            Err(err) => Err(err),
        }
    }

    pub async fn get_one_json_with_related(
        db: &DatabaseConnection,
        id: String,
    ) -> Result<Json, ModelError> {
        match Query::get_one(db, id).await {
            Ok(record) => {
                let mut json = json!(record);
                let json = json.as_object_mut().unwrap();
                json.insert(
                    "geofences".to_string(),
                    json!(record
                        .get_related_geofences()
                        .into_model::<NameId>()
                        .all(db)
                        .await?
                        .into_iter()
                        .map(|p| p.id)
                        .collect::<Vec<u32>>()),
                );
                Ok(json!(json))
            }
            Err(err) => Err(err),
        }
    }

    pub async fn paginate(
        db: &DatabaseConnection,
        page: usize,
        posts_per_page: usize,
        order: String,
        sort_by: String,
        q: String,
    ) -> Result<PaginateResults<Vec<Json>>, DbErr> {
        let paginator = project::Entity::find()
            .order_by(
                Column::from_str(&sort_by).unwrap_or(Column::Name),
                parse_order(&order),
            )
            .filter(Column::Name.like(format!("%{}%", q).as_str()))
            .paginate(db, posts_per_page);
        let total = paginator.num_items_and_pages().await?;

        let results: Vec<Model> = match paginator.fetch_page(page).await {
            Ok(results) => results,
            Err(err) => {
                println!("[project] Error paginating, {:?}", err);
                vec![]
            }
        };

        let geofences = future::try_join_all(
            results
                .iter()
                .map(|result| result.get_related_geofences().into_json().all(db)),
        )
        .await?;

        let mut results: Vec<Json> = results
            .into_iter()
            .enumerate()
            .map(|(i, project)| {
                json!({
                    "id": project.id,
                    "name": project.name,
                    "api_endpoint": project.api_endpoint,
                    "api_key": project.api_key,
                    "scanner": project.scanner,
                    // "created_at": fence.created_at,
                    // "updated_at": fence.updated_at,
                    "geofences": geofences[i],
                })
            })
            .collect();

        if sort_by == "geofences" {
            json_related_sort(&mut results, &sort_by, order);
        }

        Ok(PaginateResults {
            results,
            total: total.number_of_items,
            has_prev: total.number_of_pages == page + 1,
            has_next: page + 1 < total.number_of_pages,
        })
    }

    pub async fn get_all(db: &DatabaseConnection) -> Result<Vec<Model>, DbErr> {
        project::Entity::find().all(db).await
    }

    pub async fn get_json_cache(db: &DatabaseConnection) -> Result<Vec<sea_orm::JsonValue>, DbErr> {
        let results = Entity::find()
            .order_by(Column::Name, Order::Asc)
            .all(db)
            .await?;
        let geofences = future::try_join_all(results.iter().map(|result| {
            result
                .get_related_geofences()
                .into_model::<NameId>()
                .all(db)
        }))
        .await?;

        Ok(results
            .into_iter()
            .enumerate()
            .map(|(i, model)| {
                json!({
                    "id": model.id,
                    "name": model.name,
                    "geofences": geofences[i].iter().map(|r| r.id).collect::<Vec<u32>>()
                })
            })
            .collect())
    }

    pub async fn create(db: &DatabaseConnection, new_project: Model) -> Result<Model, DbErr> {
        ActiveModel {
            name: Set(new_project.name.to_owned()),
            api_endpoint: Set(new_project.api_endpoint.to_owned()),
            api_key: Set(new_project.api_key.to_owned()),
            scanner: Set(new_project.scanner.to_owned()),
            created_at: Set(Utc::now()),
            updated_at: Set(Utc::now()),
            ..Default::default()
        }
        .insert(db)
        .await
    }

    pub async fn get_scanner_project(db: &DatabaseConnection) -> Result<Option<Model>, DbErr> {
        project::Entity::find()
            .filter(Column::Scanner.eq(true))
            .filter(Column::ApiEndpoint.is_not_null())
            .one(db)
            .await
    }

    pub async fn update(
        db: &DatabaseConnection,
        id: u32,
        new_model: Model,
    ) -> Result<Model, DbErr> {
        let old_model: Option<Model> = project::Entity::find_by_id(id).one(db).await?;
        let mut old_model: ActiveModel = old_model.unwrap().into();

        old_model.name = Set(new_model.name.to_owned());
        old_model.api_endpoint = Set(new_model.api_endpoint.to_owned());
        old_model.api_key = Set(new_model.api_key.to_owned());
        old_model.scanner = Set(new_model.scanner.to_owned());
        old_model.updated_at = Set(Utc::now());
        old_model.update(db).await
    }

    pub async fn delete(db: &DatabaseConnection, id: u32) -> Result<DeleteResult, DbErr> {
        let record = project::Entity::delete_by_id(id).exec(db).await?;
        Ok(record)
    }

    pub async fn search(db: &DatabaseConnection, search: String) -> Result<Vec<Model>, DbErr> {
        Ok(project::Entity::find()
            .filter(Column::Name.like(format!("%{}%", search).as_str()))
            .all(db)
            .await?)
    }
}
